// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id        Int       @id @default(autoincrement())
    username  String    @unique
    password  String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    account   Account[]
    session   Session?
}

model Session {
    id        Int      @id @default(autoincrement())
    User      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    key       String
    maxAge    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    id            Int         @id @default(autoincrement())
    User          User        @relation(fields: [userId], references: [id])
    userId        Int
    twitterUser   TwitterUser @relation(fields: [twitterUserId], references: [id])
    twitterUserId BigInt
    tweet         Tweet[]
}

model TwitterUser {
    id              BigInt        @id @unique
    name            String
    screenName      String
    profileImageUrl String
    accounts        Account[]
    tweets          Tweet[]
    oauth           TwitterOAuth?
}

model Tweet {
    id            Int         @id @default(autoincrement())
    account       Account     @relation(fields: [accountId], references: [id])
    accountId     Int
    twitterUser   TwitterUser @relation(fields: [twitterUserId], references: [id])
    twitterUserId BigInt
    createdAt     DateTime    @default(now())
    updatedAt     DateTime?   @updatedAt
    dateTime      DateTime    @db.Timestamptz(3)
    content       String      @db.VarChar(280)
    sent          Boolean     @default(false)
    uploads       Upload[]
}

model Upload {
    id        Int      @id @default(autoincrement())
    tweet     Tweet    @relation(fields: [tweetId], references: [id])
    tweetId   Int
    name      String
    url       String   @unique
    alt       String?
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model TwitterOAuth {
    id            Int         @id @default(autoincrement())
    twitterUser   TwitterUser @relation(fields: [twitterUserId], references: [id])
    twitterUserId BigInt      @unique
    accessToken   String
    accessSecret  String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

// data model might need some small changes.
model AcmPaper {
  id            Int      @id @default(autoincrement())
  doi           String   @unique
  type          String
  title         String
  authors       String[]
  fullAuthors   String?
  url           String
  preprint      String?
  shortAbstract String
  fullAbstract  String?
  monthYear     String?
  pages         String?
  citations     Int?
  downloads     Int?
  source        String
  scrapeDate    DateTime @default(now())
}

// data model not complete yet, will be complete once scrapping starts
model ResearchrPaper {
  id            Int      @id @default(autoincrement())
  doi           String?  @unique
  title         String   @unique
  authors       String[]
  fullAuthors   String?
  url           String
  preprint      String?
  shortAbstract String
  fullAbstract  String?
  source        String
  scrapeDate    DateTime @default(now())
}

model ScrapeHistory {
  id            Int      @id @default(autoincrement())
  links         String
  errors        String
  scrapeDate    DateTime @default(now())
}
